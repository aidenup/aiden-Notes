import{_ as e,c as a,o as i,a as t}from"./app.ab50d960.js";const _=JSON.parse('{"title":"vue3 升级做了哪些优化","description":"","frontmatter":{},"headers":[{"level":3,"title":"学习vue3 源码分为 解析部分和跟随编码部分","slug":"学习vue3-源码分为-解析部分和跟随编码部分","link":"#学习vue3-源码分为-解析部分和跟随编码部分","children":[]}],"relativePath":"theory/vue3/guide.md","lastUpdated":1684249316000}'),r={name:"theory/vue3/guide.md"},p=t('<h3 id="学习vue3-源码分为-解析部分和跟随编码部分" tabindex="-1">学习vue3 源码分为 解析部分和跟随编码部分 <a class="header-anchor" href="#学习vue3-源码分为-解析部分和跟随编码部分" aria-hidden="true">#</a></h3><ul><li>解析部分 注重逻辑和实现思想</li><li>代码部分 实现一个mini vue3</li><li>提升javascript功底</li><li>提升工作效率</li><li>借鉴源码的经验，学习高手思路</li><li>提升阅读源码能力</li></ul><p>自己的疑问</p><p>vue3 的源码从哪里开始看，整理的架构是什么样的</p><p>组件库开发 脚手架开发</p><p>目录 导读 一文看懂vue.js3 的优化</p><p>模块一 ： vue3 核心组件的实现</p><ol><li>组件渲染：vnode 到真实 DOM 是如何转变的</li><li>组件更新：完整的DOM diff 流程是怎么样的 （上）</li><li>组件更新：完整的DOM diff 流程是怎么样的 （下）</li></ol><p>模块二：学会新设计Compostiton API</p><p>模块三：编译过程和背后的优化思想</p><p>模块四：探索更多实用特性背后的实现原理</p><p>模块五：学习vue 内置组建的实现原理</p><h1 id="vue3-升级做了哪些优化" tabindex="-1">vue3 升级做了哪些优化 <a class="header-anchor" href="#vue3-升级做了哪些优化" aria-hidden="true">#</a></h1><p>因为vue2 数据量大后带来的渲染和更新的性能问题</p><h5 id="实现dom-功能-必须接触数据的访问和更新" tabindex="-1">实现DOM 功能，必须接触数据的访问和更新 <a class="header-anchor" href="#实现dom-功能-必须接触数据的访问和更新" aria-hidden="true">#</a></h5><p>响应式数据都会被劫持，当时数据发生变化后，为了自动更新DOM，那么就必须劫持数据的更新也就是说当数据发生改变后，能自动执行一些代码去更新DOM</p><h5 id="vue-怎么知道更新哪一片dom-呢" tabindex="-1">vue 怎么知道更新哪一片DOM 呢 <a class="header-anchor" href="#vue-怎么知道更新哪一片dom-呢" aria-hidden="true">#</a></h5><p><strong>因为渲染DOM 的时候访问了数据？</strong>，我们可以对它进行访问劫持，这样就在内部建立了依赖关系（dom和数据的依赖关系？），也就知道数据对应的DOM 上什么</p><p>依赖watcher 数据结构做依赖管理</p><h5 id="关于vue2-与-vue3-的响应式处理" tabindex="-1">关于vue2 与 vue3 的响应式处理 <a class="header-anchor" href="#关于vue2-与-vue3-的响应式处理" aria-hidden="true">#</a></h5><p>在vue2 中如果定义的数据结构相当复杂（多层嵌套）vue2 会递归遍历每一层并加上响应式 在vue3 中只给访问到的内部对象添加响应式，而不是无脑递归</p><hr><p><strong>2023-03-19</strong></p><p>我学习了一段时间的源码，学完就忘了，这次是第二轮的学习，第一轮学到了 conputed 的实现，由于前面部分没有充分理解透彻，所以我决定第二轮学习。就是这样的嘛，源码不可能学一遍就会的，尤其我这样的菜鸟。</p><p>在第二轮学习中，我觉得每个及结点或者说每个API 都要产出一篇精细的文章，并且mini vue 的提交记录要同步笔记中的API 实现过程</p><p>当然第二轮结束后还会有第三轮，直到我理解的非常透彻</p><p>计划总共花费三个月的时间学习</p>',27),d=[p];function u(o,n,l,h,s,v){return i(),a("div",null,d)}const f=e(r,[["render",u]]);export{_ as __pageData,f as default};
