// 1402. 做菜顺序
/**
一个厨师收集了他 n 道菜的满意程度 satisfaction ，这个厨师做出每道菜的时间都是 1 单位时间。
一道菜的 「 like-time 系数 」定义为烹饪这道菜结束的时间（包含之前每道菜所花费的时间）乘以这道菜的满意程度，也就是 time[i]*satisfaction[i] 。
返回厨师在准备了一定数量的菜肴后可以获得的最大 like-time 系数 总和。
你可以按 任意 顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。

输入：satisfaction = [-1,-8,0,5,-9]
输出：14
解释：去掉第二道和最后一道菜，最大的 like-time 系数和为 (-1*1 + 0*2 + 5*3 = 14) 。每道菜都需要花费 1 单位时间完成。
 */

var maxSatisfaction = function (satisfaction) {
  const len = satisfaction.length;
  const dp = new Array(len + 1).fill(0).map(() => new Array(len + 1).fill(0));

  satisfaction.sort((a, b) => a - b);
  let res = 0;
  for (let i = 1; i <= len; i++) {
    for (let j = 1; j <= i; j++) {
      dp[i][j] = dp[i - 1][j - 1] + satisfaction[i - 1] * j;
      if (j < i) {
        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j]);
      }
      res = Math.max(res, dp[i][j]);
    }
  }
  return res;
};

const satisfaction = [-1, -8, 0, 5, -9];
const res = maxSatisfaction(satisfaction);

console.log(res);

/**
satisfaction [ -9, -8, -1, 0, 5 ]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, 0, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, 0, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 0, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 5, 0, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 5, 10, 0, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 5, 10, 14, 0, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 5, 10, 14, 10, 0 ]
]
[
  [ 0, 0, 0, 0, 0, 0 ],
  [ 0, -9, 0, 0, 0, 0 ],
  [ 0, -8, -25, 0, 0, 0 ],
  [ 0, -1, -10, -28, 0, 0 ],
  [ 0, 0, -1, -10, -28, 0 ],
  [ 0, 5, 10, 14, 10, -3 ]
]
14
 */
